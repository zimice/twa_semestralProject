@page "/login"
@using Ppt23.Client.Components
@using Ppt.Shared


@inject HttpClient Http
@inject SharedStateService StateService

<h1 class="text-3xl font-bold mb-4 text-center w-full">Login</h1>



<div class="flex flex-col space-y-4 p-4 max-w-md mx-auto">

    <div class="flex flex-col">
        <label for="username" class="text-lg font-medium text-blue-700">Username:</label>
        <input id="username" class="border-2 border-blue-700 mt-1 p-2 w-full" @bind-value="username" />
    </div>

    <div class="flex flex-col">
        <label for="password" class="text-lg font-medium text-blue-700">Password:</label>
        <input id="password" type="password" class="border-2 border-blue-700 mt-1 p-2 w-full" @bind-value="password" />
    </div>

    <button class="p-2 pl-5 pr-5 bg-blue-500 text-gray-100 text-lg rounded-lg focus:outline-none focus:border-4 border-blue-300 w-full" @onclick="checkUserCredentials">
        Log in
    </button>

</div>


@code {
    string? username;
    string? password;



    private async Task CreateEquipment(VybaveniVm newEquipment)
    {
        HttpResponseMessage response = await Http.PostAsJsonAsync($"vybaveni", newEquipment);

        if (response.IsSuccessStatusCode)
        {
            VybaveniVm createdEquipment = await response.Content.ReadFromJsonAsync<VybaveniVm>();
            if (createdEquipment != null)
            {
                newEquipment.Id = createdEquipment.Id;

                Console.WriteLine("Item created successfully.");
            }
        }
        else
        {
            Console.WriteLine("Failed to create item. Please refresh the page.");
        }
    }
    private async Task checkUserCredentials()
    {
        User newUser = new User(username,password);
        HttpResponseMessage response = await Http.PostAsJsonAsync($"login", newUser);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("You are logged in");
            }
            else
            {
                Console.WriteLine("Bad credentials");
            }
    }

    private async Task saveChanges(VybaveniVm equipment)
    {
        await UpdateEquipment(equipment);
    }

    private async Task performRevision(VybaveniVm equipment)

    {
        equipment.LastRevisionDateTime = DateTime.Now;
        equipment.isRevisionNeeded = !equipment.isRevisionNeeded;

        await UpdateEquipment(equipment);


    }
    private async Task UpdateEquipment(VybaveniVm updatedEquipment)
    {
        HttpResponseMessage response = await Http.PutAsJsonAsync($"vybaveni/{updatedEquipment.Id}", updatedEquipment);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Item updated successfully.");
        }
        else
        {
            Console.WriteLine("Failed to update item. Please refresh the page.");
        }
    }
    private async Task DeleteEquipment(VybaveniVm equipment)
    {
        HttpResponseMessage response = await Http.DeleteAsync($"vybaveni/{equipment.Id}");

        if (response.IsSuccessStatusCode)
        {

            Console.WriteLine("Item deleted successfully.");
        }
        else
        {
            Console.WriteLine("Failed to delete item. Please refresh the page.");
        }
    }

    protected override async Task OnInitializedAsync()
    {

    }

}